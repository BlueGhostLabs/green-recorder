#!/usr/bin/python
# -*- coding: utf-8 -*-

# M.Hanny Sabbagh <mhsabbagh@outlook.com>, 2017.
# Green Recorder is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# Green Recorder is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with Green Recorder.  If not, see <http://www.gnu.org/licenses/>.
import gi

gi.require_version('Gtk','3.0')
gi.require_version('AppIndicator3', '0.1')

from gi.repository import Gtk,GLib, AppIndicator3 as appindicator
import subprocess,signal

# Get the current name of the Videos folder
VideosFolder = GLib.get_user_special_dir(GLib.USER_DIRECTORY_VIDEOS)
RecorderDisplay = subprocess.check_output("xdpyinfo | grep 'dimensions:'|awk '{print $2}'", shell=True)[:-1]
DISPLAY = subprocess.check_output("echo $DISPLAY", shell=True)[:-1]

def recorderindicator():
    # Create the app indicator widget.
    global indicator
    indicator = appindicator.Indicator.new("Green Recorder", '/usr/share/pixmaps/green-recorder.png', appindicator.IndicatorCategory.APPLICATION_STATUS)
    is_alive =RecorderProcess.poll()
    if is_alive == None:
       indicator.set_status(appindicator.IndicatorStatus.ACTIVE)
    indicator.set_menu(indicator_menu())
    # Make middle-click stops the recording process.
    indicator.set_secondary_activate_target(stoprecordingbutton)
    Gtk.main()
    Gtk.main_quit()
    
def indicator_menu():
    # Here menu items are defined and built. Used global on stoprecordingbutton to pass it as a Gtk.Widget to the indicator to be able to stop recording using middle click on the icon directly.
    menu = Gtk.Menu()
    global stoprecordingbutton
    stoprecordingbutton = Gtk.MenuItem('Stop Record')
    stoprecordingbutton.connect('activate', stoprecording)
    menu.append(stoprecordingbutton)
    menu.show_all()
    return menu
    
def record():
    # Hide the main window.
    window.hide() #haha.
    
    # Get the given values from the input fields.
    RecorderDelay = str(delayvalue.get_value_as_int())
    RecorderFrames = str(framesvalue.get_value_as_int())
    RecorderFullPathName = (folderchooser.get_uri() + '/' + filenameentry.get_text() + '.' + formatchooser.get_active_id())
    RecorderFullPathName=RecorderFullPathName.replace('%20', " ")
    RecorderAudioServer = audioserver.get_active_id()
    
    # Call the recording command using ffmpeg. Wait before that.
    subprocess.call(["sleep", RecorderDelay])
    global RecorderProcess
    if videocheck.get_active() == True and microphonecheck.get_active() == False:
        RecorderProcess = subprocess.Popen(["ffmpeg", "-video_size", RecorderDisplay, "-framerate", RecorderFrames, "-f", "x11grab", "-i", DISPLAY, "-q", "1", RecorderFullPathName, "-y"])
    elif videocheck.get_active() == False and microphonecheck.get_active() == True:
        RecorderProcess = subprocess.Popen(["ffmpeg", "-f", RecorderAudioServer, "-i", "default", "-ac", "1", RecorderFullPathName, "-y"])
    else:
        RecorderProcess = subprocess.Popen(["ffmpeg", "-video_size", RecorderDisplay, "-framerate", RecorderFrames, "-f", "x11grab", "-i", DISPLAY, "-f", RecorderAudioServer, "-ac", "1", "-i", "default", "-q", "1", RecorderFullPathName, "-y"])
    
    
def stoprecording(self):
    subprocess.call(["sleep", "2"])
    RecorderProcess.terminate()
    window.show()
    indicator.set_status(appindicator.IndicatorStatus.PASSIVE)

# Import the glade file and its widgets.
builder = Gtk.Builder()
builder.add_from_file("/usr/share/green-recorder/ui.glade")

# TODO: Name the objects directly in the glade file and then use builder_get_objects() to import the objects with their names in just a single line.
window = builder.get_object("window1")
aboutdialog = builder.get_object("aboutdialog")
folderchooser = builder.get_object("filechooserbutton1")
filenameentry = builder.get_object("entry1")
formatchooser = builder.get_object("comboboxtext1")
audioserver = builder.get_object("comboboxtext2")
recordbutton = builder.get_object("button1")
videocheck = builder.get_object("checkbutton1")
microphonecheck = builder.get_object("checkbutton2")
frametext = builder.get_object("label2")
delaytext = builder.get_object("label3")
audioservertext = builder.get_object("label4")
framesvalue = builder.get_object("spinbutton1")
delayvalue = builder.get_object("spinbutton2")
expander = builder.get_object("expandertext")

# Assign the texts to the interface
# TODO: support internationalization using gettext.
window.set_title("Green Recorder")
window.connect("delete-event", Gtk.main_quit,)
folderchooser.set_uri("file://" + VideosFolder)
filenameentry.set_placeholder_text("File Name (Will be overwritten)..")
formatchooser.append("mkv", "MKV (Matroska multimedia container format)")
formatchooser.append("avi", "AVI (Audio Video Interleaved)")
formatchooser.append("mp4", "MP4 (MPEG-4 Part 14)")
formatchooser.append("wmv", "WMV (Windows Media Video)")
formatchooser.append("nut", "NUT (NUT Recording Format)")
formatchooser.set_active(0)
videocheck.set_label("Record Video")
microphonecheck.set_label("Record Microphone")
aboutdialog.set_transient_for(window)
aboutdialog.set_program_name("Green Recorder")
aboutdialog.set_version("1.1.2")
aboutdialog.set_copyright("Â© 2017 Green Project")
aboutdialog.set_wrap_license(True)
aboutdialog.set_license("Green Recorder is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n\nGreen Recorder is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\nSee the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with Green Recorder. If not, see <http://www.gnu.org/licenses/>.")
aboutdialog.set_comments("An easy to use yet strong desktop recorder.")
aboutdialog.set_authors(['M.Hanny Sabbagh <mhsabbagh@outlook.com>\nMousab Alzoubi'])
aboutdialog.set_artists(['Mustapha Assabar'])
aboutdialog.set_website("https://github.com/green-project/green-recorder")
aboutdialog.set_logo_icon_name("green-recorder")
expander.set_label("Advanced:")
frametext.set_label("Frames:")
delaytext.set_label("Delay:")
audioservertext.set_label("Audio Input:")
# Make default checkboxes True.
videocheck.set_active(True)
microphonecheck.set_active(True)
# Check for the available audio server.
try:
   pulsecommand = subprocess.check_output("pulseaudio", shell=True)
except subprocess.CalledProcessError as output:
    if output.returncode == 127:
        print("No pulseaudio found", output.returncode)
    else:
        audioserver.append("pulse", "PulseAudio")
try:
   alsacommand = subprocess.check_output("aserver", shell=True)
except subprocess.CalledProcessError as output2:
    if output2.returncode == 127:
        print("No alsa found", output2.returncode)
    else:
        audioserver.append("alsa", "Alsa Module")
audioserver.set_active(0)

# The actions which should happen upon every signal.
class Handler:
# TODO: Create a checking method which check if the ffmpeg process started or not before locking the buttons or releasing them. This can be done easily if switched to subprocess module.
    def about(self, GtkButton):
        aboutdialog.run()
        aboutdialog.hide()

    def recordclicked(self, GtkButton):
        record()
        recorderindicator()

# Connect the handler to the glade file's objects.
builder.connect_signals(Handler())

# The End of all things.
if __name__ == "__main__": 
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    window.show_all()
    Gtk.main()
